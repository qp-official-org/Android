// Generated by view binder compiler. Do not edit!
package com.example.qp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.qp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWriteQuestionBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final EditText contentEdit;

  @NonNull
  public final TextView contentEditInfoTv;

  @NonNull
  public final TextView contentTv;

  @NonNull
  public final ImageView hashtagCancelBtn;

  @NonNull
  public final EditText hashtagEdit;

  @NonNull
  public final RecyclerView hashtagRv;

  @NonNull
  public final TextView hashtagTv;

  @NonNull
  public final TextView levelBtn;

  @NonNull
  public final TextView levelBtnOrange;

  @NonNull
  public final TextView levelInfoTv;

  @NonNull
  public final TextView levelTv;

  @NonNull
  public final CheckBox noteCheckbox;

  @NonNull
  public final TextView noteContentTv;

  @NonNull
  public final TextView registerBtn;

  @NonNull
  public final EditText titleEdit;

  @NonNull
  public final TextView titleInfoTv;

  @NonNull
  public final TextView titleTv;

  @NonNull
  public final TextView writeQuestionNote;

  @NonNull
  public final Button writeSearchBt;

  @NonNull
  public final ConstraintLayout writeTopMenu;

  private ActivityWriteQuestionBinding(@NonNull ScrollView rootView, @NonNull EditText contentEdit,
      @NonNull TextView contentEditInfoTv, @NonNull TextView contentTv,
      @NonNull ImageView hashtagCancelBtn, @NonNull EditText hashtagEdit,
      @NonNull RecyclerView hashtagRv, @NonNull TextView hashtagTv, @NonNull TextView levelBtn,
      @NonNull TextView levelBtnOrange, @NonNull TextView levelInfoTv, @NonNull TextView levelTv,
      @NonNull CheckBox noteCheckbox, @NonNull TextView noteContentTv,
      @NonNull TextView registerBtn, @NonNull EditText titleEdit, @NonNull TextView titleInfoTv,
      @NonNull TextView titleTv, @NonNull TextView writeQuestionNote, @NonNull Button writeSearchBt,
      @NonNull ConstraintLayout writeTopMenu) {
    this.rootView = rootView;
    this.contentEdit = contentEdit;
    this.contentEditInfoTv = contentEditInfoTv;
    this.contentTv = contentTv;
    this.hashtagCancelBtn = hashtagCancelBtn;
    this.hashtagEdit = hashtagEdit;
    this.hashtagRv = hashtagRv;
    this.hashtagTv = hashtagTv;
    this.levelBtn = levelBtn;
    this.levelBtnOrange = levelBtnOrange;
    this.levelInfoTv = levelInfoTv;
    this.levelTv = levelTv;
    this.noteCheckbox = noteCheckbox;
    this.noteContentTv = noteContentTv;
    this.registerBtn = registerBtn;
    this.titleEdit = titleEdit;
    this.titleInfoTv = titleInfoTv;
    this.titleTv = titleTv;
    this.writeQuestionNote = writeQuestionNote;
    this.writeSearchBt = writeSearchBt;
    this.writeTopMenu = writeTopMenu;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWriteQuestionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWriteQuestionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_write_question, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWriteQuestionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.content_edit;
      EditText contentEdit = ViewBindings.findChildViewById(rootView, id);
      if (contentEdit == null) {
        break missingId;
      }

      id = R.id.content_edit_info_tv;
      TextView contentEditInfoTv = ViewBindings.findChildViewById(rootView, id);
      if (contentEditInfoTv == null) {
        break missingId;
      }

      id = R.id.content_tv;
      TextView contentTv = ViewBindings.findChildViewById(rootView, id);
      if (contentTv == null) {
        break missingId;
      }

      id = R.id.hashtag_cancel_btn;
      ImageView hashtagCancelBtn = ViewBindings.findChildViewById(rootView, id);
      if (hashtagCancelBtn == null) {
        break missingId;
      }

      id = R.id.hashtag_edit;
      EditText hashtagEdit = ViewBindings.findChildViewById(rootView, id);
      if (hashtagEdit == null) {
        break missingId;
      }

      id = R.id.hashtag_rv;
      RecyclerView hashtagRv = ViewBindings.findChildViewById(rootView, id);
      if (hashtagRv == null) {
        break missingId;
      }

      id = R.id.hashtag_tv;
      TextView hashtagTv = ViewBindings.findChildViewById(rootView, id);
      if (hashtagTv == null) {
        break missingId;
      }

      id = R.id.level_btn;
      TextView levelBtn = ViewBindings.findChildViewById(rootView, id);
      if (levelBtn == null) {
        break missingId;
      }

      id = R.id.level_btn_orange;
      TextView levelBtnOrange = ViewBindings.findChildViewById(rootView, id);
      if (levelBtnOrange == null) {
        break missingId;
      }

      id = R.id.level_info_tv;
      TextView levelInfoTv = ViewBindings.findChildViewById(rootView, id);
      if (levelInfoTv == null) {
        break missingId;
      }

      id = R.id.level_tv;
      TextView levelTv = ViewBindings.findChildViewById(rootView, id);
      if (levelTv == null) {
        break missingId;
      }

      id = R.id.note_checkbox;
      CheckBox noteCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (noteCheckbox == null) {
        break missingId;
      }

      id = R.id.note_content_tv;
      TextView noteContentTv = ViewBindings.findChildViewById(rootView, id);
      if (noteContentTv == null) {
        break missingId;
      }

      id = R.id.register_btn;
      TextView registerBtn = ViewBindings.findChildViewById(rootView, id);
      if (registerBtn == null) {
        break missingId;
      }

      id = R.id.title_edit;
      EditText titleEdit = ViewBindings.findChildViewById(rootView, id);
      if (titleEdit == null) {
        break missingId;
      }

      id = R.id.title_info_tv;
      TextView titleInfoTv = ViewBindings.findChildViewById(rootView, id);
      if (titleInfoTv == null) {
        break missingId;
      }

      id = R.id.title_tv;
      TextView titleTv = ViewBindings.findChildViewById(rootView, id);
      if (titleTv == null) {
        break missingId;
      }

      id = R.id.write_question_note;
      TextView writeQuestionNote = ViewBindings.findChildViewById(rootView, id);
      if (writeQuestionNote == null) {
        break missingId;
      }

      id = R.id.write_search_bt;
      Button writeSearchBt = ViewBindings.findChildViewById(rootView, id);
      if (writeSearchBt == null) {
        break missingId;
      }

      id = R.id.write_top_menu;
      ConstraintLayout writeTopMenu = ViewBindings.findChildViewById(rootView, id);
      if (writeTopMenu == null) {
        break missingId;
      }

      return new ActivityWriteQuestionBinding((ScrollView) rootView, contentEdit, contentEditInfoTv,
          contentTv, hashtagCancelBtn, hashtagEdit, hashtagRv, hashtagTv, levelBtn, levelBtnOrange,
          levelInfoTv, levelTv, noteCheckbox, noteContentTv, registerBtn, titleEdit, titleInfoTv,
          titleTv, writeQuestionNote, writeSearchBt, writeTopMenu);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
