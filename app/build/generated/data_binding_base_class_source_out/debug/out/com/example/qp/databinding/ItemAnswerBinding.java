// Generated by view binder compiler. Do not edit!
package com.example.qp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.qp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAnswerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout answerCommentBtnLayout;

  @NonNull
  public final TextView answerCommentBtnTv;

  @NonNull
  public final RecyclerView answerCommentRv;

  @NonNull
  public final TextView answerContentTv;

  @NonNull
  public final ImageButton answerLikeBtn;

  @NonNull
  public final ImageButton answerMoreBtn;

  @NonNull
  public final ImageView answerUserImg;

  @NonNull
  public final TextView answerUserNameTv;

  @NonNull
  public final ConstraintLayout commentLayout;

  @NonNull
  public final TextView writeAnswerBtn;

  @NonNull
  public final EditText writeAnswerEdit;

  @NonNull
  public final ConstraintLayout writeAnswerLayout;

  @NonNull
  public final ImageButton writeAnswerMoreBtn;

  @NonNull
  public final ImageView writeAnswerUserImg;

  @NonNull
  public final TextView writeAnswerUserNameTv;

  private ItemAnswerBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout answerCommentBtnLayout, @NonNull TextView answerCommentBtnTv,
      @NonNull RecyclerView answerCommentRv, @NonNull TextView answerContentTv,
      @NonNull ImageButton answerLikeBtn, @NonNull ImageButton answerMoreBtn,
      @NonNull ImageView answerUserImg, @NonNull TextView answerUserNameTv,
      @NonNull ConstraintLayout commentLayout, @NonNull TextView writeAnswerBtn,
      @NonNull EditText writeAnswerEdit, @NonNull ConstraintLayout writeAnswerLayout,
      @NonNull ImageButton writeAnswerMoreBtn, @NonNull ImageView writeAnswerUserImg,
      @NonNull TextView writeAnswerUserNameTv) {
    this.rootView = rootView;
    this.answerCommentBtnLayout = answerCommentBtnLayout;
    this.answerCommentBtnTv = answerCommentBtnTv;
    this.answerCommentRv = answerCommentRv;
    this.answerContentTv = answerContentTv;
    this.answerLikeBtn = answerLikeBtn;
    this.answerMoreBtn = answerMoreBtn;
    this.answerUserImg = answerUserImg;
    this.answerUserNameTv = answerUserNameTv;
    this.commentLayout = commentLayout;
    this.writeAnswerBtn = writeAnswerBtn;
    this.writeAnswerEdit = writeAnswerEdit;
    this.writeAnswerLayout = writeAnswerLayout;
    this.writeAnswerMoreBtn = writeAnswerMoreBtn;
    this.writeAnswerUserImg = writeAnswerUserImg;
    this.writeAnswerUserNameTv = writeAnswerUserNameTv;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAnswerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAnswerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_answer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAnswerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.answer_comment_btn_layout;
      LinearLayout answerCommentBtnLayout = ViewBindings.findChildViewById(rootView, id);
      if (answerCommentBtnLayout == null) {
        break missingId;
      }

      id = R.id.answer_comment_btn_tv;
      TextView answerCommentBtnTv = ViewBindings.findChildViewById(rootView, id);
      if (answerCommentBtnTv == null) {
        break missingId;
      }

      id = R.id.answer_comment_rv;
      RecyclerView answerCommentRv = ViewBindings.findChildViewById(rootView, id);
      if (answerCommentRv == null) {
        break missingId;
      }

      id = R.id.answer_content_tv;
      TextView answerContentTv = ViewBindings.findChildViewById(rootView, id);
      if (answerContentTv == null) {
        break missingId;
      }

      id = R.id.answer_like_btn;
      ImageButton answerLikeBtn = ViewBindings.findChildViewById(rootView, id);
      if (answerLikeBtn == null) {
        break missingId;
      }

      id = R.id.answer_more_btn;
      ImageButton answerMoreBtn = ViewBindings.findChildViewById(rootView, id);
      if (answerMoreBtn == null) {
        break missingId;
      }

      id = R.id.answer_user_img;
      ImageView answerUserImg = ViewBindings.findChildViewById(rootView, id);
      if (answerUserImg == null) {
        break missingId;
      }

      id = R.id.answer_user_name_tv;
      TextView answerUserNameTv = ViewBindings.findChildViewById(rootView, id);
      if (answerUserNameTv == null) {
        break missingId;
      }

      id = R.id.comment_layout;
      ConstraintLayout commentLayout = ViewBindings.findChildViewById(rootView, id);
      if (commentLayout == null) {
        break missingId;
      }

      id = R.id.write_answer_btn;
      TextView writeAnswerBtn = ViewBindings.findChildViewById(rootView, id);
      if (writeAnswerBtn == null) {
        break missingId;
      }

      id = R.id.write_answer_edit;
      EditText writeAnswerEdit = ViewBindings.findChildViewById(rootView, id);
      if (writeAnswerEdit == null) {
        break missingId;
      }

      id = R.id.write_answer_layout;
      ConstraintLayout writeAnswerLayout = ViewBindings.findChildViewById(rootView, id);
      if (writeAnswerLayout == null) {
        break missingId;
      }

      id = R.id.write_answer_more_btn;
      ImageButton writeAnswerMoreBtn = ViewBindings.findChildViewById(rootView, id);
      if (writeAnswerMoreBtn == null) {
        break missingId;
      }

      id = R.id.write_answer_user_img;
      ImageView writeAnswerUserImg = ViewBindings.findChildViewById(rootView, id);
      if (writeAnswerUserImg == null) {
        break missingId;
      }

      id = R.id.write_answer_user_name_tv;
      TextView writeAnswerUserNameTv = ViewBindings.findChildViewById(rootView, id);
      if (writeAnswerUserNameTv == null) {
        break missingId;
      }

      return new ItemAnswerBinding((ConstraintLayout) rootView, answerCommentBtnLayout,
          answerCommentBtnTv, answerCommentRv, answerContentTv, answerLikeBtn, answerMoreBtn,
          answerUserImg, answerUserNameTv, commentLayout, writeAnswerBtn, writeAnswerEdit,
          writeAnswerLayout, writeAnswerMoreBtn, writeAnswerUserImg, writeAnswerUserNameTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
